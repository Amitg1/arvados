def workflow main(
  arvados_api_hosts string[],
  superuser_tokens string[],
  fed_migrate="arv-federation-migrate"
) {

  run tool(arvados_api_hosts, superuser_tokens, create_users=File("create_users.py")) {
    python $(inputs.create_users) <<<
{
  "arvados_api_hosts": $(inputs.arvados_api_hosts),
  "superuser_tokens": $(inputs.superuser_tokens)
}
>>>
    return arvados_api_hosts as ar
  }

  run workflow(ar, arvados_api_hosts, superuser_tokens,
               fed_migrate,
	       host=$(inputs.arvados_api_hosts[0]),
  	       token=$(inputs.superuser_tokens[0])) {
    requirements {
      EnvVarRequirement {
        envDef: {
          ARVADOS_API_HOST: "$(inputs.host)",
          ARVADOS_API_TOKEN: "$(inputs.token)",
	  ARVADOS_API_HOST_INSECURE: "1"
	}
      }
    }

    run tool(fed_migrate, host, token) {
      $(inputs.fed_migrate) --report report.csv
      return File("report.csv") as report
    }

    run tool(report, host, token) {
      sed -E 's/,(case[1-8])2?,/,\\1,/g' < $(inputs.report.path) > report.csv
      return File("report.csv") as report2
    }

    run tool(report2, fed_migrate, host, token) {
      $(inputs.fed_migrate) --migrate $(inputs.report2)
      return report2 as report3
    }

    run tool(report3, host, token, arvados_api_hosts, superuser_tokens, check=File("check.py")) {
      python $(inputs.check) <<<
{
  "arvados_api_hosts": $(inputs.arvados_api_hosts),
  "superuser_tokens": $(inputs.superuser_tokens)
}
>>>
    return report3 as r
    }
  }

  return report3
}