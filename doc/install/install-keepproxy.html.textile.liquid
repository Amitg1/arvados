---
layout: default
navsection: installguide
title: Install Keepproxy server
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

# "Introduction":#introduction
# "Update config.yml":#update-config
# "Update nginx configuration":#update-nginx
# "Install keepproxy package":#install-packages
# "Start the service":#start-service
# "Restart the API server and controller":#restart-api
# "Confirm working installation":#confirm-working

h2(#introduction). Introduction

The Keepproxy server is a gateway into your Keep storage. Unlike the Keepstore servers, which are only accessible on the local LAN, Keepproxy is suitable for clients located elsewhere on the internet. Specifically, in contrast to Keepstore:
* A client writing through Keepproxy sends a single copy of a data block, and Keepproxy distributes copies to the appropriate Keepstore servers.
* A client can write through Keepproxy without precomputing content hashes. Notably, the browser-based upload feature in Workbench requires Keepproxy.
* Keepproxy checks API token validity before processing requests. (Clients that can connect directly to Keepstore can use it as scratch space even without a valid API token.)

By convention, we use the following hostname for the Keepproxy server:

<div class="offset1">
table(table table-bordered table-condensed).
|_. Hostname|
|keep.@uuid_prefix@.your.domain|
</div>

This hostname should resolve from anywhere on the internet.

h2(#update-config). Update config.yml

Edit the cluster config at @/etc/arvados/config.yml@ and set @Services.Keepproxy.ExternalURL@ and @Services.Keepproxy.InternalURLs@.

<notextile>
<pre><code>    Services:
      Keepproxy:
        ExternalURL: <span class="userinput">https://keep.ClusterID.example.com</span>
        InternalURLs:
	  <span class="userinput">"http://keep.ClusterID.example.com:25107": {}</span>
</span></code></pre>
</notextile>

h2(#update-nginx). Update Nginx configuration

Put a reverse proxy with SSL support in front of Keepproxy. Keepproxy itself runs on the port 25107 (or whatever is specified in @Services.Keepproxy.InternalURL@) the reverse proxy runs on port 443 and forwards requests to Keepproxy.

Use a text editor to create a new file @/etc/nginx/conf.d/keepproxy.conf@ with the following configuration. Options that need attention are marked with “TODO”.

<notextile><pre><code>upstream keepproxy {
  server                127.0.0.1:<span class="userinput">25107</span>;
}

server {
  listen                  <span class="userinput">[TODO your public IP address]</span>:443 ssl;
  server_name             keep.<span class="userinput">ClusterID</span>.example.com;

  proxy_connect_timeout   90s;
  proxy_read_timeout      300s;
  proxy_set_header        X-Real-IP $remote_addr;
  proxy_http_version      1.1;
  proxy_request_buffering off;

  ssl on;
  ssl_certificate     <span class="userinput">/TODO/YOUR/PATH/TO/cert.pem</span>;
  ssl_certificate_key <span class="userinput">/TODO/YOUR/PATH/TO/cert.key</span>;

  # Clients need to be able to upload blocks of data up to 64MiB in size.
  client_max_body_size    64m;

  location / {
    proxy_pass            http://keepproxy;
  }
}
</code></pre></notextile>

Note: if the Web uploader is failing to upload data and there are no logs from keepproxy, be sure to check the nginx proxy logs.  In addition to "GET" and "PUT", The nginx proxy must pass "OPTIONS" requests to keepproxy, which should respond with appropriate Cross-origin resource sharing headers.  If the CORS headers are not present, brower security policy will cause the upload request to silently fail.  The CORS headers are generated by keepproxy and should not be set in nginx.

h2(#install-packages). Install Keepproxy package

h3. Centos 7

<notextile>
<pre><code># <span class="userinput">yum install keepproxy</span>
</code></pre>
</notextile>

h3. Debian and Ubuntu

<notextile>
<pre><code># <span class="userinput">apt-get install keepproxy</span>
</code></pre>
</notextile>

h2(#start-service). Start the service

If your system does not use systemd, skip this section and follow the "runit instructions":#runit instead.

If your system uses systemd, the keepproxy service should already be set up. Start it and check its status:

<notextile>
<pre><code># <span class="userinput">systemctl restart keepproxy</span>
# <span class="userinput">systemctl status keepproxy</span>
&#x25cf; keepproxy.service - Arvados Keep Proxy
   Loaded: loaded (/lib/systemd/system/keepproxy.service; enabled)
   Active: active (running) since Tue 2019-07-23 09:33:47 EDT; 3 weeks 1 days ago
     Docs: https://doc.arvados.org/
 Main PID: 1150 (Keepproxy)
   CGroup: /system.slice/keepproxy.service
           └─1150 /usr/bin/keepproxy
[...]
</code></pre>
</notextile>

h2(#restart-api). Restart the API server and controller

After adding keeproxy to the Services section, make sure the cluster config file is up to date on the API server host, and restart the API server and controller processes to ensure the changes are applied.

<notextile>
<pre><code># <span class="userinput">systemctl restart nginx arvados-controller</span>
</code></pre>
</notextile>

h2(#confirm-working). Confirm working installation

Log into a host that is on a network external to your private Arvados network.  The host should be able to contact your keepproxy server (eg @keep.ClusterID.example.com@), but not your keepstore servers (eg keep[0-9].ClusterID.example.com).

Install the "Python SDK":{{site.baseurl}}/sdk/python/sdk-python.html

@ARVADOS_API_HOST@ and @ARVADOS_API_TOKEN@ must be set in the environment.

You should now be able to use @arv-put@ to upload collections and @arv-get@ to fetch collections, for an example see "Testing keep.":install-keepstore.html#testing on the keepstore install page.
