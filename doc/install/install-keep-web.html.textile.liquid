---
layout: default
navsection: installguide
title: Install Keep-web server
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

# "Introduction":#introduction
# "Configure DNS":#introduction
# "Update config.yml":#update-config
# "Update nginx configuration":#update-nginx
# "Install keep-web package":#install-packages
# "Start the service":#start-service
# "Restart the API server and controller":#restart-api
# "Confirm working installation":#confirm-working

h2(#introduction). Introduction

The Keep-web server provides read/write HTTP (WebDAV) access to files stored in Keep. It serves public data to unauthenticated clients, and serves private data to clients that supply Arvados API tokens. It can be installed anywhere with access to Keep services, typically behind a web proxy that provides TLS support. See the "godoc page":http://godoc.org/github.com/curoverse/arvados/services/keep-web for more detail.

By convention, we use the following hostnames for the Keep-web service:

<notextile>
<pre><code>download.<span class="userinput">uuid_prefix</span>.your.domain
collections.<span class="userinput">uuid_prefix</span>.your.domain
*.collections.<span class="userinput">uuid_prefix</span>.your.domain
</code></pre>
</notextile>

The above hostnames should resolve from anywhere on the internet.

h2(#dns). Configure DNS

It is important to properly configure the download service to migitate cross-site-scripting (XSS) attacks.  A HTML page can be stored in collection.  If an attacker causes a victim to visit that page through Workbench, it will be rendered by the browser.  If all collections are served at the same domain, the browser will consider collections as coming from the same origin and having access to the same browsing data, enabling malicious Javascript on that page to access Arvados on behalf of the victim.

Browser security is based on domain names.  We  having separate domains for each collection



        # Serve preview links using uuid or pdh in subdomain
        # (requires wildcard DNS and TLS certificate)
        #   https://*.collections.ClusterID.example.com
        #
        # Serve preview links using uuid or pdh in main domain
        # (requires wildcard DNS and TLS certificate)
        #   https://*--collections.ClusterID.example.com


limiting preview to circumstances where the collection is not accessed with the user's regular full-access token.

        # Serve preview links by setting uuid or pdh in the path.
        # This configuration only allows previews of public data or
        # collection-sharing links, because these use the anonymous
        # user token or the token is already embedded in the URL.
        # Other data must be handled as downloads via WebDAVDownload:
        #   https://collections.ClusterID.example.com

The configuration option @Services.WebDAV.ExternalURL@ is the base URL for Workbench inline preview.  If blank, use WebDAVDownload instead, and disable inline preview.  If both are empty, downloading collections from workbench will be impossible.




        # Base URL for download links. If blank, serve links to WebDAV
        # with disposition=attachment query param.  Unlike preview links,
        # browsers do not render attachments, so there is no risk of XSS.
        #
        # If WebDAVDownload is blank, and WebDAV uses a
        # single-origin form, then Workbench will show an error page
        #
        # Serve download links by setting uuid or pdh in the path:
        #   https://download.ClusterID.example.com


Configure your DNS servers so the following names resolve to your keep-web server's public IP address.
* @download.ClusterID.example.com@
* @collections.ClusterID.example.com@
* @*--collections.ClusterID.example.com@, if you have a wildcard TLS certificate valid for @*.ClusterID.example.com@ and your DNS server allows this without interfering with other DNS names.
* @*.collections.ClusterID.example.com@, if you have a wildcard TLS certificate valid for these names.

If neither of the above wildcard options is feasible, you have two choices:
# Serve web content at @collections.ClusterID.example.com@, but only for unauthenticated requests (public data and collection sharing links). Authenticated requests will always result in file downloads, using the @download@ name. For example, the Workbench "preview" button and the "view entire log file" link will invoke file downloads instead of displaying content in the browser window.
# In the special case where you know you are immune to XSS exploits, you can enable the "trust all content" mode in Keep-web and Workbench (setting @Collections.TrustAllContent: true@ on the config file). With this enabled, inline web content can be served from a single @collections@ host name; no wildcard DNS or certificate is needed. Do not do this without understanding the security implications described in the "Keep-web documentation":http://godoc.org/github.com/curoverse/arvados/services/keep-web.

h2(#update-config). Update config.yml

{% assign railscmd = "bundle exec ./script/get_anonymous_user_token.rb --get" %}
{% assign railsout = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" %}
If you intend to use Keep-web to serve public data to anonymous clients, configure it with an anonymous token. Use the following command on the <strong>API server</strong> to create an anonymous user token. {% include 'install_rails_command' %}

Update @Services.WebDAV@ and @Services.WebDAVDownload@ in config.yml:

<notextile>
<pre><code>    Services:
      WebDAV:
        InternalURLs:
          <span class="userinput">"http://collections.<span class="userinput">ClusterID</span>.example.com:9002/": {}</span>
        ExternalURL: "https://collections.<span class="userinput">ClusterID</span>.example.com"
      WebDAVDownload:
        InternalURLs:
          <span class="userinput">"http://download.<span class="userinput">ClusterID</span>.example.com:9002/": {}</span>
        ExternalURL: "https://download.<span class="userinput">ClusterID</span>.example.com"
    Users:
      AnonymousUserToken: "{{railsout}}"
    Collections:
      TrustAllContent: false
</code></pre>
</notextile>

Set @Users.AnonymousUserToken: ""@ (empty string) or leave it out if you do not want to serve public data.

Workbench has features like "download file from collection" and "show image" which work better if the content is served by Keep-web rather than Workbench itself. We recommend using the two different hostnames ("download" and "collections" above) for file downloads and inline content respectively.

Additionally, one of the following entries on your cluster configuration file (depending on your DNS setup) tells Workbench which URL will be used to serve user content that can be displayed in the browser, like image previews and static HTML pages.

<notextile>
<pre><code>Clusters:
  <span class="userinput">uuid_prefix</span>:
    Services:
      WebDAV:
        ExternalURL: "https://*--collections.<span class="userinput">uuid_prefix</span>.example.com"
        ExternalURL: "https://*.collections.<span class="userinput">uuid_prefix</span>.example.com"
        ExternalURL: "https://collections.<span class="userinput">uuid_prefix</span>.example.com"
</code></pre>
</notextile>

h3. Update nginx configuration

The Keep-web service will be accessible from anywhere on the internet, so we recommend using TLS for transport encryption.

This is best achieved by putting a reverse proxy with TLS support in front of Keep-web, running on port 443 and passing requests to Keep-web on port 9002 (or whatever port you chose in your run script).

Note: A wildcard TLS certificate is required in order to support a full-featured secure Keep-web service. Without it, Keep-web can offer file downloads for all Keep data; however, in order to avoid cross-site scripting vulnerabilities, Keep-web refuses to serve private data as web content except when it is accessed using a "secret link" share. With a wildcard TLS certificate and DNS configured appropriately, all data can be served as web content.

Use a text editor to create a new file @/etc/nginx/conf.d/keep-web.conf@ with the following configuration. Options that need attention are marked with “TODO”.

<notextile><pre>
upstream keep-web {
  server                127.0.0.1:<span class="userinput">9002</span>;
}

server {
  listen                <span class="userinput">[TODO: your public IP address]</span>:443 ssl;
  server_name           download.<span class="userinput">ClusterID</span>.example.com
                        collections.<span class="userinput">ClusterID</span>.example.com
                        *.collections.<span class="userinput">ClusterID</span>.example.com
                        ~.*--collections.<span class="userinput">ClusterID</span>.example.com;

  proxy_connect_timeout 90s;
  proxy_read_timeout    300s;

  ssl                   on;
  ssl_certificate       <span class="userinput"/>YOUR/PATH/TO/cert.pem</span>;
  ssl_certificate_key   <span class="userinput"/>YOUR/PATH/TO/cert.key</span>;

  location / {
    proxy_pass          http://keep-web;
    proxy_set_header    Host            $host;
    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;

    client_max_body_size    0;
    proxy_http_version      1.1;
    proxy_request_buffering off;
  }
}
</pre></notextile>

{% include 'notebox_begin' %}
If you restrict access to your Arvados services based on network topology -- for example, your proxy server is not reachable from the public internet -- additional proxy configuration might be needed to thwart cross-site scripting attacks that would circumvent your restrictions. Read the "'Intranet mode' section of the Keep-web documentation":https://godoc.org/github.com/curoverse/arvados/services/keep-web#hdr-Intranet_mode now.
{% include 'notebox_end' %}

h2. Install Keep-web package

Typically Keep-web runs on the same host as Keepproxy.

h3. Centos 7

<notextile>
<pre><code># <span class="userinput">yum install keepproxy</span>
</code></pre>
</notextile>

h3. Debian and Ubuntu

<notextile>
<pre><code># <span class="userinput">apt-get install keepproxy</span>
</code></pre>
</notextile>

h2(#start-service). Start the service

If your system does not use systemd, skip this section and follow the "runit instructions":#runit instead.

If your system uses systemd, the keep-web service should already be set up. Start it and check its status:

<notextile>
<pre><code>~$ <span class="userinput">sudo systemctl restart keep-web</span>
~$ <span class="userinput">sudo systemctl status keep-web</span>
&#x25cf; keep-web.service - Arvados Keep web gateway
   Loaded: loaded (/lib/systemd/system/keep-web.service; enabled)
   Active: active (running) since Sat 2019-08-10 10:33:21 UTC; 3 days ago
     Docs: https://doc.arvados.org/
 Main PID: 4242 (keep-web)
   CGroup: /system.slice/keep-web.service
           └─4242 /usr/bin/keep-web
[...]
</code></pre>
</notextile>
