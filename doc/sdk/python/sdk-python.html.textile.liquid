---
layout: default
navsection: sdk
navmenu: Python
title: "Installation"
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

The Python SDK provides access from Python to the Arvados API and Keep.  It also includes a number of command line tools for using and administering Arvados and Keep, and some conveniences for use in Crunch scripts; see "Crunch utility libraries":crunch-utility-libraries.html for details.

h2. Installation

If you are logged in to an Arvados VM, the Python SDK should be installed.

To use the Python SDK elsewhere, you can install from PyPI or a distribution package.

The Python SDK supports Python 2.7 and 3.4+

h3. Option 1: Install with pip

This installation method is recommended to make the SDK available for use in your own Python programs. It can coexist with the system-wide installation method from a distribution package (option 2, below).

Run @pip install arvados-python-client@ in an appropriate installation environment, such as a virtualenv.

If your version of @pip@ is 1.4 or newer, the @pip install@ command might give an error: "Could not find a version that satisfies the requirement arvados-python-client". If this happens, try @pip install --pre arvados-python-client@.

h3. Option 2: Install from a distribution package

This installation method is recommended to make the CLI tools available system-wide. It can coexist with the installation method described in option 1, above.

First, "add the appropriate package repository for your distribution":{{ site.baseurl }}/install/install-manual-prerequisites.html#repos.

On Red Hat-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo yum install python-arvados-python-client</code>
</code></pre>
</notextile>

On Debian-based systems:

<notextile>
<pre><code>~$ <span class="userinput">sudo apt-get install python-arvados-python-client</code>
</code></pre>
</notextile>

h3. Test installation

If the SDK is installed and your @ARVADOS_API_HOST@ and @ARVADOS_API_TOKEN@ environment variables are set up correctly (see "api-tokens":{{site.baseurl}}/user/reference/api-tokens.html for details), @import arvados@ should produce no errors.

If you installed with pip (option 1, above):

<notextile>
<pre>~$ <code class="userinput">python</code>
Python 2.7.4 (default, Sep 26 2013, 03:20:26)
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> <code class="userinput">import arvados</code>
>>> <code class="userinput">arvados.api('v1')</code>
&lt;apiclient.discovery.Resource object at 0x233bb50&gt;
</pre>
</notextile>

If you installed from a distribution package (option 2): the package includes a virtualenv, which means the correct Python environment needs to be loaded before the Arvados SDK can be imported. This can be done by activating the virtualenv first:

<notextile>
<pre>~$ <code class="userinput">source /usr/share/python2.7/dist/python-arvados-python-client/bin/activate</code>
(python-arvados-python-client) ~$ <code class="userinput">python</code>
Python 2.7.4 (default, Sep 26 2013, 03:20:26)
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> <code class="userinput">import arvados</code>
>>> <code class="userinput">arvados.api('v1')</code>
&lt;apiclient.discovery.Resource object at 0x233bb50&gt;
</pre>
</notextile>

Or alternatively, by using the Python executable from the virtualenv directly:

<notextile>
<pre>~$ <code class="userinput">/usr/share/python2.7/dist/python-arvados-python-client/bin/python</code>
Python 2.7.4 (default, Sep 26 2013, 03:20:26)
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> <code class="userinput">import arvados</code>
>>> <code class="userinput">arvados.api('v1')</code>
&lt;apiclient.discovery.Resource object at 0x233bb50&gt;
</pre>
</notextile>

h3. Examples

Get the User object for the current user:

<notextile>
<pre><code class="userinput">current_user = arvados.api('v1').users().current().execute()
</code></pre>
</notextile>

Get the UUID of an object that was retrieved using the SDK:

<notextile>
<pre><code class="userinput">my_uuid = current_user['uuid']
</code></pre>
</notextile>

Retrieve an object by ID:

<notextile>
<pre><code class="userinput">some_user = arvados.api('v1').users().get(uuid=my_uuid).execute()
</code></pre>
</notextile>

Create an object:

<notextile>
<pre><code class="userinput">test_link = arvados.api('v1').links().create(
    body={'link_class':'test','name':'test'}).execute()
</code></pre>
</notextile>

Update an object:

<notextile>
<pre><code class="userinput">arvados.api('v1').links().update(
    uuid=test_link['uuid'],
    body={'properties':{'foo':'bar'}}).execute()
</code></pre>
</notextile>

Get a list of objects:

<notextile>
<pre><code class="userinput">repos = arvados.api('v1').repositories().list().execute()
len(repos['items'])</code>
2
<code class="userinput">repos['items'][0]['uuid']</code>
u'qr1hi-s0uqq-kg8cawglrf74bmw'
</code></pre>
</notextile>

h3. Notes

The general form of an API call is:

<notextile>
<pre><code class="userinput">arvados.api(<i>api_version</i>).<i>plural_resource_type</i>().<i>api_method</i>(<i>parameter</i>=<i>value</i>, ...).execute()
</code></pre>
</notextile>

Many API methods accept a parameter whose name is the same as the resource type. For example, @links.create@ accepts a parameter called @link@. This parameter should be given as @body@.

<notextile>
<pre><code class="userinput">arvados.api('v1').links().create(
    uuid=test_link['uuid'],
    body={'properties':{'foo':'bar'}}).execute()
</code></pre>
</notextile>

One way to make API calls slightly less verbose is:

<notextile>
<pre><code class="userinput">arv = arvados.api('v1')
j = arv.jobs().list().execute()
</code></pre>
</notextile>

The SDK retrieves the list of API methods from the server at run time. Therefore, the set of available methods is determined by the server version rather than the SDK version.
