<%# Work unit status %>

<div class="row">
  <div class="col-md-4">
    <% if wu.is_paused? %>
      <p>
        This <%= wu.title %> is paused. Children that are already running
        will continue to run, but no new processes will be submitted.
      </p>
    <% end %>

    <%= raw(wu.show_runtime) %>
  </div>
  <%# Need additional handling for main object display  %>
  <% if @object.uuid == wu.uuid %>
    <div class="col-md-3">
      <% if wu.is_running? and wu.child_summary_str %>
        <%= wu.child_summary_str %>
      <% end %>
    </div>
    <div class="col-md-3">
      <%= render partial: 'work_units/progress', locals: {wu: wu} %>
    </div>
    <div class="col-md-2">
      <% if wu.can_cancel? and @object.editable? %>
        <%= form_tag "#{wu.uri}/cancel", remote: true, style: "display:inline; padding-left: 1em" do |f| %>
          <%= hidden_field_tag :return_to, url_for(@object) %>
          <%= button_tag "Cancel", {class: 'btn btn-xs btn-danger', id: "cancel-obj-button"} %>
        <% end %>
      <% end %>
    </div>
  <% end %>
</div>

<p>
  <%= render(partial: 'work_units/component_detail', locals: {current_obj: wu}) %>
</p>

<%# Work unit children %>

<%
  load_preloaded_objects(wu.children.collect {|j| j})

  collections = wu.outputs.flatten.uniq
  collections << wu.log_collection if wu.log_collection
  collections << wu.docker_image if wu.docker_image
  collections = wu.children.collect {|j| j.outputs}.compact
  collections = collections.flatten.uniq
  collections.concat wu.children.collect {|j| j.docker_image}.uniq.compact
  collections.concat wu.children.collect {|j| j.log_collection}.uniq.compact
  collections_pdhs = collections.select {|x| !(m = CollectionsHelper.match(x)).nil?}.uniq.compact
  collections_uuids = collections - collections_pdhs

  if collections_uuids.any?
    start = 0; inc = 200
    while start < collections_uuids.length
      preload_collections_for_objects collections_uuids[start, inc]
      start += inc
    end
  end

  if collections_pdhs.any?
    start = 0; inc = 200
    while start < collections_pdhs.length
      preload_for_pdhs collections_pdhs[start, inc]
      start += inc
    end
  end

  repos = wu.children.collect {|c| c.repository}.uniq.compact
  preload_objects_for_dataclass(Repository, repos, :name) if repos.any?
%>

<% if wu.has_unreadable_children %>
  <%= render(partial: "pipeline_instances/show_components_json",
             locals: {error_name: "Unreadable components", backtrace: nil, wu: wu}) %>
<% else %>
  <% @descendent_count = 0 if !@descendent_count %>
  <% wu.children.each do |c| %>
    <% @descendent_count += 1 %>
    <%= render(partial: 'work_units/show_child', locals: {current_obj: c, i: @descendent_count, expanded: false}) %>
  <% end %>
<% end %>
